//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/input/ControlInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace src
{
    public partial class @ControlInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ControlInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlInput"",
    ""maps"": [
        {
            ""name"": ""CoreMap"",
            ""id"": ""a1fdd0b3-2e32-4478-8f0d-39f51b3d2231"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""8b86ea74-3223-4bcb-9a57-1917ba3f610f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WeakAttack"",
                    ""type"": ""Button"",
                    ""id"": ""555e31d4-291b-4fd2-9504-ecc254d042a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StrongAttack"",
                    ""type"": ""Button"",
                    ""id"": ""c28a55f8-43c2-433d-8cc4-4b154fd833ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Button"",
                    ""id"": ""1284ffab-4994-4553-8148-7016c25fe159"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WSAD"",
                    ""id"": ""b8360924-94ba-4db6-85d1-1e2a1515b740"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2ab7ccec-d020-42b5-9c86-81a56be9ca18"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fde5ae72-c00b-4f1e-b8da-4dd1e8f5f23b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7db03e01-10ee-417b-8587-ca5674dc2179"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2625bce5-62aa-4398-8954-0379f8335362"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""16c70655-6a12-4403-82dc-0d87f8f00c79"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b39a481d-9468-4b6f-8649-4fd03acee32f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ad0e304a-1f22-4a08-b75d-c8df08e69e82"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0bb25a7b-4bd6-4b53-8ff5-31e95a272ba2"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c5321d39-f5bd-47ac-b4fc-f3c564130d0d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c2313e0c-9282-40c5-adcb-20b2d3c6025f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WeakAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62338d4c-06ba-4740-b214-e2b3170d432d"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StrongAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b05b459-9369-4757-bcab-321809a4aff2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // CoreMap
            m_CoreMap = asset.FindActionMap("CoreMap", throwIfNotFound: true);
            m_CoreMap_Movement = m_CoreMap.FindAction("Movement", throwIfNotFound: true);
            m_CoreMap_WeakAttack = m_CoreMap.FindAction("WeakAttack", throwIfNotFound: true);
            m_CoreMap_StrongAttack = m_CoreMap.FindAction("StrongAttack", throwIfNotFound: true);
            m_CoreMap_Dodge = m_CoreMap.FindAction("Dodge", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // CoreMap
        private readonly InputActionMap m_CoreMap;
        private List<ICoreMapActions> m_CoreMapActionsCallbackInterfaces = new List<ICoreMapActions>();
        private readonly InputAction m_CoreMap_Movement;
        private readonly InputAction m_CoreMap_WeakAttack;
        private readonly InputAction m_CoreMap_StrongAttack;
        private readonly InputAction m_CoreMap_Dodge;
        public struct CoreMapActions
        {
            private @ControlInput m_Wrapper;
            public CoreMapActions(@ControlInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_CoreMap_Movement;
            public InputAction @WeakAttack => m_Wrapper.m_CoreMap_WeakAttack;
            public InputAction @StrongAttack => m_Wrapper.m_CoreMap_StrongAttack;
            public InputAction @Dodge => m_Wrapper.m_CoreMap_Dodge;
            public InputActionMap Get() { return m_Wrapper.m_CoreMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CoreMapActions set) { return set.Get(); }
            public void AddCallbacks(ICoreMapActions instance)
            {
                if (instance == null || m_Wrapper.m_CoreMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CoreMapActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @WeakAttack.started += instance.OnWeakAttack;
                @WeakAttack.performed += instance.OnWeakAttack;
                @WeakAttack.canceled += instance.OnWeakAttack;
                @StrongAttack.started += instance.OnStrongAttack;
                @StrongAttack.performed += instance.OnStrongAttack;
                @StrongAttack.canceled += instance.OnStrongAttack;
                @Dodge.started += instance.OnDodge;
                @Dodge.performed += instance.OnDodge;
                @Dodge.canceled += instance.OnDodge;
            }

            private void UnregisterCallbacks(ICoreMapActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @WeakAttack.started -= instance.OnWeakAttack;
                @WeakAttack.performed -= instance.OnWeakAttack;
                @WeakAttack.canceled -= instance.OnWeakAttack;
                @StrongAttack.started -= instance.OnStrongAttack;
                @StrongAttack.performed -= instance.OnStrongAttack;
                @StrongAttack.canceled -= instance.OnStrongAttack;
                @Dodge.started -= instance.OnDodge;
                @Dodge.performed -= instance.OnDodge;
                @Dodge.canceled -= instance.OnDodge;
            }

            public void RemoveCallbacks(ICoreMapActions instance)
            {
                if (m_Wrapper.m_CoreMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICoreMapActions instance)
            {
                foreach (var item in m_Wrapper.m_CoreMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CoreMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CoreMapActions @CoreMap => new CoreMapActions(this);
        public interface ICoreMapActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnWeakAttack(InputAction.CallbackContext context);
            void OnStrongAttack(InputAction.CallbackContext context);
            void OnDodge(InputAction.CallbackContext context);
        }
    }
}
